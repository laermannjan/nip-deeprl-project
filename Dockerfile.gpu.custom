FROM ubuntu:16.04

LABEL maintainer "Jan Laermann [laermannjan@gmail.com]"

# Set environment variables
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

# Install cuDNN 6
RUN echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list
ENV CUDNN_VERSION 6.0.21
# Set keyboard configuration in advance of installing CUDA
RUN apt-get update && apt-get install -yq keyboard-configuration

RUN apt-get update && apt-get install -y\
     build-essential \
     curl \
     ffmpeg \
     libglu1-mesa \
     libgl1-mesa-dev \
     libxinerama1 \
     libxcursor1 \
     libcupti-dev \
     libpng12-dev \
     libzmq3-dev \
     libav-tools \
     libboost-all-dev \
     libjpeg-dev \
     libpq-dev \
     libsdl2-dev \
     swig3.0 \
     pkg-config \
     swig3.0 \
     software-properties-common \
     xvfb \
     xorg-dev \
     xpra \
     zlib1g-dev \
     module-init-tools \
     && \
     apt-get clean && \
     rm -rf /var/lib/apt/lists/* && \
     ln -s /usr/bin/swig3.0 /usr/bin/swig
RUN apt-get -y upgrade

RUN apt-get update && apt-get install -y --allow-unauthenticated \
     libcudnn6=$CUDNN_VERSION-1+cuda8.0 \
     libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 \
     wget

RUN apt-get update && apt-get install -y -q linux-headers-generic
# Download CUDA
RUN cd /opt && \
    wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run


ENV IGNORE_CC_MISMATCH 1
RUN cd /opt && \
    chmod +x *-run && \
    ./cuda_8.0.61_375.26_linux-run --silent --driver --toolkit --samples --verbose --no-opengl-libs
    # ./cuda_8.0.61_375.26_linux-run -extract=`pwd`/nvidia_installers

RUN cd /opt && \
    rm -rf cuda_8.0*

ENV LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-8.0/lib64
ENV PATH=$PATH:/usr/local/cuda-8.0/bin
# RUN cd /opt && \
#     ./cuda_8.0.61.2_linux-run --silent --accept-eula

# Set up environment, download and install miniconda
ENV MINICONDA_ROOT /opt/miniconda
ENV PATH $MINICONDA_ROOT/bin:$PATH

RUN curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o ~/miniconda.sh && \
    bash ~/miniconda.sh -b -p $MINICONDA_ROOT && \
    rm ~/miniconda.sh

RUN pip install \
    box2d-py \
    baselines

RUN conda install tensorflow-gpu

RUN rm -rf miniconda.sh

WORKDIR /code
ENV PROJECT_PATH /code

COPY . /code
# Is this needed after we switched to use pyvirtualdisplay
COPY xorg.conf /usr/share/X11/xorg.conf.d/xorg.conf

RUN chmod +x /code/docker-entrypoint.sh

ENTRYPOINT ["/code/docker-entrypoint.sh"]
